syntax = "proto3";

package event.v1;

import "common/v1/common.proto";
import "event/v1/core.proto";
import "event/v1/event.proto";

service EventMaterialService {
  rpc PredictEventMaterialItem(PredictEventMaterialItemRequest) returns (PredictEventMaterialItemResponse);
  rpc PredictPositionsFromText(PredictPositionsFromTextRequest) returns (PredictPositionsFromTextResponse);
  rpc PredictTimeTable(PredictTimeTableRequest) returns (PredictTimeTableResponse);
  rpc PredictEventItem(PredictEventItemRequest) returns (PredictEventItemResponse);
}

message Place {
  string name = 1;
  string address = 2;
  Pos pos = 3;
}

message EventMaterial {
  // 外出するかしないか
  // ただのタスクか外出イベントか
  bool is_out = 1;
  // イベントのタイトル
  string remind = 2;
  // 現在地の緯度経度
  Pos from_pos = 3;
  // 目的地の名前
  string destination = 4;
  // 目的地の緯度経度
  // PredictPositionsFromTextで取得したものを使う
  Pos destination_pos = 5;
  // 移動手段
  // リクエスト時には設定しなくてよい
  MoveType move_type = 6;
  // 移動手段のオプション
  string option = 7;
  // イベントの開始時間
  DateTime start_time = 8;
  // イベントの終了時間
  DateTime end_time = 9;
}

message PredictEventMaterialItemRequest {
  common.v1.Uid uid = 1;
  // 初回は空でリクエスト
  EventMaterial event_material = 2;
  // レスポンスをもとにして、テキストをクライアント側で作成する
  string text = 3;
}

message PredictEventMaterialItemResponse {
  EventMaterial event_material = 1;
}

message PredictPositionsFromTextRequest {
  common.v1.Uid uid = 1;
  // ex.) イオン、スターバックス、東京駅
  string text = 2;
  // 現在地の緯度経度
  Pos from_pos = 3;
}

message PredictPositionsFromTextResponse {
  // 候補をいくつか返す
  repeated Place place = 1;
}

message PredictTimeTableRequest {
  common.v1.Uid uid = 1;
  // 全て埋まった状態でリクエスト
  EventMaterial event_material = 2;
  // 行きか帰りか
  bool is_going = 3;
}

message PredictTimeTableResponse {
  repeated TimeTable time_table = 1;
}

message PredictEventItemRequest {
  common.v1.Uid uid = 1;
  string text = 2;
}

message PredictEventItemResponse {
  repeated string event_item = 1;
}
